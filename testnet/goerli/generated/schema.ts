// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Task extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("initiatorAddress", Value.fromBytes(Bytes.empty()));
    this.set("initiatorName", Value.fromString(""));
    this.set("recipientAddress", Value.fromBytes(Bytes.empty()));
    this.set("recipientName", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("entranceAmount", Value.fromBigInt(BigInt.zero()));
    this.set("description", Value.fromString(""));
    this.set("endTask", Value.fromBigInt(BigInt.zero()));
    this.set("positiveVotes", Value.fromBigInt(BigInt.zero()));
    this.set("negativeVotes", Value.fromBigInt(BigInt.zero()));
    this.set("participants", Value.fromBigInt(BigInt.zero()));
    this.set("accepted", Value.fromBoolean(false));
    this.set("executed", Value.fromBoolean(false));
    this.set("finished", Value.fromBoolean(false));
    this.set("language", Value.fromString(""));
    this.set("taskLatitude", Value.fromString(""));
    this.set("taskLongitude", Value.fromString(""));
    this.set("proofLink", Value.fromString(""));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("chainId", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Task entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Task entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Task", id.toString(), this);
    }
  }

  static load(id: string): Task | null {
    return changetype<Task | null>(store.get("Task", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get initiatorAddress(): Bytes {
    let value = this.get("initiatorAddress");
    return value!.toBytes();
  }

  set initiatorAddress(value: Bytes) {
    this.set("initiatorAddress", Value.fromBytes(value));
  }

  get initiatorName(): string {
    let value = this.get("initiatorName");
    return value!.toString();
  }

  set initiatorName(value: string) {
    this.set("initiatorName", Value.fromString(value));
  }

  get recipientAddress(): Bytes {
    let value = this.get("recipientAddress");
    return value!.toBytes();
  }

  set recipientAddress(value: Bytes) {
    this.set("recipientAddress", Value.fromBytes(value));
  }

  get recipientName(): string {
    let value = this.get("recipientName");
    return value!.toString();
  }

  set recipientName(value: string) {
    this.set("recipientName", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get entranceAmount(): BigInt {
    let value = this.get("entranceAmount");
    return value!.toBigInt();
  }

  set entranceAmount(value: BigInt) {
    this.set("entranceAmount", Value.fromBigInt(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get endTask(): BigInt {
    let value = this.get("endTask");
    return value!.toBigInt();
  }

  set endTask(value: BigInt) {
    this.set("endTask", Value.fromBigInt(value));
  }

  get positiveVotes(): BigInt {
    let value = this.get("positiveVotes");
    return value!.toBigInt();
  }

  set positiveVotes(value: BigInt) {
    this.set("positiveVotes", Value.fromBigInt(value));
  }

  get negativeVotes(): BigInt {
    let value = this.get("negativeVotes");
    return value!.toBigInt();
  }

  set negativeVotes(value: BigInt) {
    this.set("negativeVotes", Value.fromBigInt(value));
  }

  get participants(): BigInt {
    let value = this.get("participants");
    return value!.toBigInt();
  }

  set participants(value: BigInt) {
    this.set("participants", Value.fromBigInt(value));
  }

  get accepted(): boolean {
    let value = this.get("accepted");
    return value!.toBoolean();
  }

  set accepted(value: boolean) {
    this.set("accepted", Value.fromBoolean(value));
  }

  get executed(): boolean {
    let value = this.get("executed");
    return value!.toBoolean();
  }

  set executed(value: boolean) {
    this.set("executed", Value.fromBoolean(value));
  }

  get finished(): boolean {
    let value = this.get("finished");
    return value!.toBoolean();
  }

  set finished(value: boolean) {
    this.set("finished", Value.fromBoolean(value));
  }

  get language(): string {
    let value = this.get("language");
    return value!.toString();
  }

  set language(value: string) {
    this.set("language", Value.fromString(value));
  }

  get taskLatitude(): string {
    let value = this.get("taskLatitude");
    return value!.toString();
  }

  set taskLatitude(value: string) {
    this.set("taskLatitude", Value.fromString(value));
  }

  get taskLongitude(): string {
    let value = this.get("taskLongitude");
    return value!.toString();
  }

  set taskLongitude(value: string) {
    this.set("taskLongitude", Value.fromString(value));
  }

  get proofLink(): string {
    let value = this.get("proofLink");
    return value!.toString();
  }

  set proofLink(value: string) {
    this.set("proofLink", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get chainId(): BigInt {
    let value = this.get("chainId");
    return value!.toBigInt();
  }

  set chainId(value: BigInt) {
    this.set("chainId", Value.fromBigInt(value));
  }
}

export class UserTask extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("userAddress", Value.fromBytes(Bytes.empty()));
    this.set("userStake", Value.fromBigInt(BigInt.zero()));
    this.set("voted", Value.fromBoolean(false));
    this.set("vote", Value.fromBoolean(false));
    this.set("endTask", Value.fromBigInt(BigInt.zero()));
    this.set("finished", Value.fromBoolean(false));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserTask entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserTask entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserTask", id.toString(), this);
    }
  }

  static load(id: string): UserTask | null {
    return changetype<UserTask | null>(store.get("UserTask", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get task(): string | null {
    let value = this.get("task");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set task(value: string | null) {
    if (!value) {
      this.unset("task");
    } else {
      this.set("task", Value.fromString(<string>value));
    }
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value!.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get userStake(): BigInt {
    let value = this.get("userStake");
    return value!.toBigInt();
  }

  set userStake(value: BigInt) {
    this.set("userStake", Value.fromBigInt(value));
  }

  get voted(): boolean {
    let value = this.get("voted");
    return value!.toBoolean();
  }

  set voted(value: boolean) {
    this.set("voted", Value.fromBoolean(value));
  }

  get vote(): boolean {
    let value = this.get("vote");
    return value!.toBoolean();
  }

  set vote(value: boolean) {
    this.set("vote", Value.fromBoolean(value));
  }

  get endTask(): BigInt {
    let value = this.get("endTask");
    return value!.toBigInt();
  }

  set endTask(value: BigInt) {
    this.set("endTask", Value.fromBigInt(value));
  }

  get finished(): boolean {
    let value = this.get("finished");
    return value!.toBoolean();
  }

  set finished(value: boolean) {
    this.set("finished", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class UserFavStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("negativeVotes", Value.fromBigInt(BigInt.zero()));
    this.set("positiveVotes", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserFavStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserFavStat entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserFavStat", id.toString(), this);
    }
  }

  static load(id: string): UserFavStat | null {
    return changetype<UserFavStat | null>(store.get("UserFavStat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get negativeVotes(): BigInt {
    let value = this.get("negativeVotes");
    return value!.toBigInt();
  }

  set negativeVotes(value: BigInt) {
    this.set("negativeVotes", Value.fromBigInt(value));
  }

  get positiveVotes(): BigInt {
    let value = this.get("positiveVotes");
    return value!.toBigInt();
  }

  set positiveVotes(value: BigInt) {
    this.set("positiveVotes", Value.fromBigInt(value));
  }
}

export class UserDashStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("userName", Value.fromString(""));
    this.set("spent", Value.fromBigInt(BigInt.zero()));
    this.set("earned", Value.fromBigInt(BigInt.zero()));
    this.set("lastUpdate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserDashStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserDashStat entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserDashStat", id.toString(), this);
    }
  }

  static load(id: string): UserDashStat | null {
    return changetype<UserDashStat | null>(store.get("UserDashStat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userSocialStat(): string | null {
    let value = this.get("userSocialStat");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set userSocialStat(value: string | null) {
    if (!value) {
      this.unset("userSocialStat");
    } else {
      this.set("userSocialStat", Value.fromString(<string>value));
    }
  }

  get userName(): string {
    let value = this.get("userName");
    return value!.toString();
  }

  set userName(value: string) {
    this.set("userName", Value.fromString(value));
  }

  get spent(): BigInt {
    let value = this.get("spent");
    return value!.toBigInt();
  }

  set spent(value: BigInt) {
    this.set("spent", Value.fromBigInt(value));
  }

  get earned(): BigInt {
    let value = this.get("earned");
    return value!.toBigInt();
  }

  set earned(value: BigInt) {
    this.set("earned", Value.fromBigInt(value));
  }

  get lastUpdate(): BigInt {
    let value = this.get("lastUpdate");
    return value!.toBigInt();
  }

  set lastUpdate(value: BigInt) {
    this.set("lastUpdate", Value.fromBigInt(value));
  }
}

export class GlobalStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("taskEarnings", Value.fromBigInt(BigInt.zero()));
    this.set("userCount", Value.fromBigInt(BigInt.zero()));
    this.set("taskCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GlobalStat entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GlobalStat", id.toString(), this);
    }
  }

  static load(id: string): GlobalStat | null {
    return changetype<GlobalStat | null>(store.get("GlobalStat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get taskEarnings(): BigInt {
    let value = this.get("taskEarnings");
    return value!.toBigInt();
  }

  set taskEarnings(value: BigInt) {
    this.set("taskEarnings", Value.fromBigInt(value));
  }

  get userCount(): BigInt {
    let value = this.get("userCount");
    return value!.toBigInt();
  }

  set userCount(value: BigInt) {
    this.set("userCount", Value.fromBigInt(value));
  }

  get users(): Array<string> | null {
    let value = this.get("users");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set users(value: Array<string> | null) {
    if (!value) {
      this.unset("users");
    } else {
      this.set("users", Value.fromStringArray(<Array<string>>value));
    }
  }

  get taskCount(): BigInt {
    let value = this.get("taskCount");
    return value!.toBigInt();
  }

  set taskCount(value: BigInt) {
    this.set("taskCount", Value.fromBigInt(value));
  }
}

export class GlobalUser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("userAddress", Value.fromBytes(Bytes.empty()));
    this.set("userName", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalUser entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GlobalUser entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GlobalUser", id.toString(), this);
    }
  }

  static load(id: string): GlobalUser | null {
    return changetype<GlobalUser | null>(store.get("GlobalUser", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value!.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get userName(): string {
    let value = this.get("userName");
    return value!.toString();
  }

  set userName(value: string) {
    this.set("userName", Value.fromString(value));
  }

  get globalStat(): string | null {
    let value = this.get("globalStat");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set globalStat(value: string | null) {
    if (!value) {
      this.unset("globalStat");
    } else {
      this.set("globalStat", Value.fromString(<string>value));
    }
  }
}

export class UserSocialStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("userName", Value.fromString(""));
    this.set("userLatitude", Value.fromString(""));
    this.set("userLongitude", Value.fromString(""));
    this.set("youtube", Value.fromString(""));
    this.set("twitter", Value.fromString(""));
    this.set("instagram", Value.fromString(""));
    this.set("tiktok", Value.fromString(""));
    this.set("twitch", Value.fromString(""));
    this.set("blacklist", Value.fromBytesArray(new Array(0)));
    this.set("lastUpdate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserSocialStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserSocialStat entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserSocialStat", id.toString(), this);
    }
  }

  static load(id: string): UserSocialStat | null {
    return changetype<UserSocialStat | null>(store.get("UserSocialStat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userName(): string {
    let value = this.get("userName");
    return value!.toString();
  }

  set userName(value: string) {
    this.set("userName", Value.fromString(value));
  }

  get userLatitude(): string {
    let value = this.get("userLatitude");
    return value!.toString();
  }

  set userLatitude(value: string) {
    this.set("userLatitude", Value.fromString(value));
  }

  get userLongitude(): string {
    let value = this.get("userLongitude");
    return value!.toString();
  }

  set userLongitude(value: string) {
    this.set("userLongitude", Value.fromString(value));
  }

  get youtube(): string {
    let value = this.get("youtube");
    return value!.toString();
  }

  set youtube(value: string) {
    this.set("youtube", Value.fromString(value));
  }

  get twitter(): string {
    let value = this.get("twitter");
    return value!.toString();
  }

  set twitter(value: string) {
    this.set("twitter", Value.fromString(value));
  }

  get instagram(): string {
    let value = this.get("instagram");
    return value!.toString();
  }

  set instagram(value: string) {
    this.set("instagram", Value.fromString(value));
  }

  get tiktok(): string {
    let value = this.get("tiktok");
    return value!.toString();
  }

  set tiktok(value: string) {
    this.set("tiktok", Value.fromString(value));
  }

  get twitch(): string {
    let value = this.get("twitch");
    return value!.toString();
  }

  set twitch(value: string) {
    this.set("twitch", Value.fromString(value));
  }

  get blacklist(): Array<Bytes> {
    let value = this.get("blacklist");
    return value!.toBytesArray();
  }

  set blacklist(value: Array<Bytes>) {
    this.set("blacklist", Value.fromBytesArray(value));
  }

  get lastUpdate(): BigInt {
    let value = this.get("lastUpdate");
    return value!.toBigInt();
  }

  set lastUpdate(value: BigInt) {
    this.set("lastUpdate", Value.fromBigInt(value));
  }
}
